// this script executes the next maneuver node

print "RUNNING maneuver".

// import libraries
runOncePath("0:/src/core/engine").
runOncePath("0:/src/core/burn").

set nd to nextNode.

// calculate estimate of burn duration
local pressure is 0.
local flowRate is available_mass_flow_rate_at(pressure).

print "current max flow rate: " + available_mass_flow_rate().
print "vacuum max flow rate: " + flowRate.

local effectiveExhaustVelocity is ship:availableThrustAt(pressure)/flowRate. // isp in n*s/kg = ev in m/s
local burnDuration is burn_time(ship:mass, nd:deltav:mag-1, effectiveExhaustVelocity, flowRate).

local next_mass_1 is rocket_equation_final_mass(ship:mass, nd:deltav:mag-1, effectiveExhaustVelocity).
local flow_rate_1 is next_mass_1/effectiveExhaustVelocity.
set burnDuration to burnDuration + burn_time(next_mass_1, 0.9, effectiveExhaustVelocity, flow_rate_1).

local next_mass_2 to rocket_equation_final_mass(next_mass_1, 0.9, effectiveExhaustVelocity).
local flow_rate_2 is 0.1*flow_rate_1.
set burnDuration to burnDuration + burn_time(next_mass_2, 0.1, effectiveExhaustVelocity, flow_rate_2).

local flowRateSum is flowRate + flow_rate_1 + flow_rate_2.
local burnStart is (flowRate/flowRateSum)*mean_burn_time(ship:mass, nd:deltav:mag-1, effectiveExhaustVelocity, flowRate).
set burnStart to burnStart + (flow_rate_1/flowRateSum)*mean_burn_time(next_mass_1, 0.9, effectiveExhaustVelocity, flow_rate_1).
set burnStart to burnStart + (flow_rate_2/flowRateSum)*mean_burn_time(next_mass_2, 0.1, effectiveExhaustVelocity, flow_rate_2).

print("Estimated burn duration of " + round(burnDuration, 3) + " seconds").
print("Crude Estimate: " + round(nd:deltav:mag/(ship:availablethrust/ship:mass), 3) + " seconds").
print("Starting burn " + round(burnStart, 3) + " seconds before node ETA").

// load rocket state
local rocket_state is readJson("rocket_state.json").

// create key execute_maneuver if none exists
if not rocket_state:hassuffix("execute_maneuver") {
    rocket_state:add("execute_maneuver", false).
}

// add a Kerbal Alarm Clock alarm to kick simulation out of warp a minute before the burn should start.
if addons:available("KAC") and rocket_state["execute_maneuver"] = false {
    addAlarm("Maneuver", time:seconds + nd:eta - (burnStart + 60), "Maneuver Node", "Auto-Generated by kOS script").
}

// set execute_maneuver to true
set rocket_state["execute_maneuver"] to true.

// save rocket state now that we've changed it
writeJson(rocket_state, "rocket_state.json").

// wait until 60 seconds before burn
wait until nd:eta <= burnStart + 60.

// turn to face the direction the rocket's velocity is changing in
set dv0 to nd:deltaV.
sas off.
lock steering to dv0.

// wait until rocket is facing the right direction
wait until vang(dv0, ship:facing:vector) < 0.25.

// wait until burn start
wait until nd:eta <= burnStart + 10.
kuniverse:timewarp:cancelwarp().
wait until kuniverse:timewarp:isSettled().
wait until nd:eta <= burnStart.

// set execute_maneuver to false
set rocket_state["execute_maneuver"] to false.
writeJson(rocket_state, "rocket_state.json").

// create a setpoint we can manipulate
set throttleSetpoint to 0.
lock throttle to throttleSetpoint.

// execute maneuver node
local burnStop is burnDuration-burnStart.
lock steering to nd:deltav.
set throttleSetpoint to 1.

wait until nd:deltaV:mag < 1 or nd:eta <= -burnStop or vDot(dv0, nd:deltav) < 0.
set throttleSetpoint to 1*ship:mass/ship:availableThrustAt(pressure).

wait until nd:deltaV:mag < 0.1 or nd:eta <= -burnStop or vDot(dv0, nd:deltav) < 0.
set throttleSetpoint to 0.1*ship:mass/ship:availableThrustAt(pressure).

wait until nd:deltaV:mag < 0.01 or nd:eta <= -burnStop or vDot(dv0, nd:deltav) < 0.
set throttleSetpoint to 0.

// print stats
print "End burn, remain dv " + round(nd:deltav:mag,1) + "m/s, vdot: " + round(vdot(dv0, nd:deltav),1).

// remove node so we can execute future ones
remove nd.

// unlock controls
unlock steering.
unlock throttle.

// sets user's throttle setting to zero to prevent throttle from
// returning to the throttle value it was before it was run
set ship:control:pilotMainThrottle to 0.

// unlock steering and turn on stability assist
unlock steering.
sas on.